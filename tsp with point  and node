class Node:
    def __init__(self, point):
        # This node's point 
        self.point = point

        # The next node
        self.next = None 

##class Tour:
    # Creates an empty tour
    # Initialize any instance variables you think are needed.
   # def __init__(self):   
   #     self.head = None
    #    self.tail = None
   #     self.count = 0
    #    self.total_distance = 0.0

    # Returns string representation of the Tour.
    # Should output a list of all points on the Tour.
   # def __str__(self):
       # if self.head is None:
         #   return "Empty tour"
         
        #points = []
      #  current_node = self.head
       # while current_node:
        #    points.append(str(current_node.point))
         #   current_node = current_node.next
       # return " -> ".join(points)

    # return the number of points on tour
    # Hint: You should not have to iterate through the entire Tour to get the size.
   # def size(self):
      #  return self.count

    # Computers and returns the distance of entire tour
   # def distance(self):
     #   return self.total_distance

    # Helper function to insert a new point p into the Tour after a previous Node prev.
    # Example if the tour is a -> b -> c -> d
    # And you call _insert_at(p, c). Then the Tour should look like.
    # a -> b -> c -> p -> d
    # You can use this helper function in the insertNearest and insertSmallest
    # once you find the point you should insert p after.
   # def _insert_at(self, p, prev: Node):
       
      #new_node = Node(p)
     # new_node.next = prev.next
      #prev.next = new_node
      #if prev == self.tail:
      #   self.tail = new_node
      #self.count += 1
    
      #if new_node.next is not None:
         #self.total_distance += (
          #  prev.point.distance_to(p)
         #   + p.distance_to(new_node.next.point)
        #    - prev.point.distance_to(new_node.next.point)
       # )
      #else:
       #   self.total_distance += prev.point.distance_to(p)


    # Insert a new Point p to the Tour using neearest neighbor heuristic
    #def insert_nearest(self, p):
       # if not self.head:
        #    self.head = Node(p)
        #    self.tail = self.head
        #    self.count += 1
        #else:
         #   current_node = self.head
         #   min_dist = float("inf")
       #     nearest_node = None
        #    while current_node:
         #       current_dist = current_node.point.distance_to(p)
         #       if current_dist < min_dist:
         #           min_dist = current_dist
         #           nearest_node = current_node
         #       current_node = current_node.next
         #   self._insert_at(p, nearest_node)
          #  tour_instance = Tour()
   

    # Insert a new Point p to the Tour using smallest increase heuristic
    #def insert_smallest(self, p):                
        
     # if not self.head:
     #   self.head = Node(p)
    #    self.tail = self.head
     #   self.count += 1
     # else:
      #  current_node = self.head
     #   min_increment = float("inf")
      #  ideal_node = None
        
        #while current_node:
          #  next_node = current_node.next
            #if next_node:
           #     curr_dist = current_node.point.distance_to(next_node.point)
           #     new_dist = (
           #         current_node.point.distance_to(p)
            #        + p.distance_to(next_node.point)
             #       - curr_dist
             #   )
           #     if new_dist < min_increment:
            #        min_increment = new_dist
              #      ideal_node = current_node
        #    current_node = current_node.next
        
      #  self._insert_at(p, ideal_node)
   

        
        # Insert only if ideal_node is not None     
        
        #if ideal_node:
         #   self._insert_at(p, ideal_node)
            
   

   #######
  # class Node:
   # def __init__(self, point):
    #    # This node's point 
     #   self.point = point
#
 ##       # The next node
   #     self.next = None 
#
#class Tour:
    # Creates an empty tour
    # Initialize any instance variables you think are needed.
 #   def __init__(self):   
  #      self.that = None
   #     self.node = node




    # Returns string representation of the Tour.
    # Should output a list of all points on the Tour.
    #def __str__(self):
     #   point_list = [str(point) for poin in self.point]
      #  return "[" + ", ".join(point_list) + "]"

    # return the number of points on tour
    # Hint: You should not have to iterate through the entire Tour to get the size.
    #def size(self):
     #   return len(self.point)

    # Computers and returns the distance of entire tour
    #def distance(self):
     #   total_distance = 0
      #  for i in range(len(self.nodes)):
       #     total_distance += self.nodes[i].distance_to(self.nodes[(i + 1) % len(self.nodes)])
        #return total_distance

    # Helper function to insert a new point p into the Tour after a previous Node prev.
    # Example if the tour is a -> b -> c -> d
    # And you call _insert_at(p, c). Then the Tour should look like.
    # a -> b -> c -> p -> d
    # You can use this helper function in the insertNearest and insertSmallest
    # once you find the point you should insert p after.
    #def _insert_at(self, p, prev: Node):
        # Create a new node for the new point
     #   new_node = Node(p)
        # Set the next_node of the new node to be the next_node of the previous node
       # new_node.next_node = prev.next_node
        # Set the next_node of the previous node to be the new node
        #prev.next_node = new_node
    # Insert a new Point p to the Tour using neearest neighbor heuristic
   # def insert_nearest(self, p):
      #  unvisited_nodes = set(self.node)
      #  start_node = unvisited_nodes.pop()
      #  current_node = start_node
     #   visited_nodes = [current_node]
    #    while unvisited_nodes:
      #      next_node = min(unvisited_nodes, key=current_node.distance_to)
          #  unvisited_nodes.remove(next_node)
        #    visited_nodes.append(next_node)
    #     current_node = next_node
      #  return Tour(visited_nodes)

    # Insert a new Point p to the Tour using smallest increase heuristic
    #def insert_smallest(self, p):                
         # find the two closest neighbors to the newly inserted point
     #closest_neighbor = None
    # second_closest_neighbor = None
    # min_distance = float('inf')
    # for i in range(len(self.that)):
      #  distance = calculate_distance(p, self.that[i])
       # if distance < min_distance:
       #     min_distance = distance
         #   second_closest_neighbor = closest_neighbor
         #   closest_neighbor = i
    
    # update the tour's distance by adding the distance between the newly inserted point and its neighbors
    # if second_closest_neighbor is None:
        # only one point in tour, update distance to include new point
       # self.total_distance = 2 * min_distance
     #else:
        # update distance to include new point and the distance between its neighbors
      #  self.total_distance += calculate_distance(p, self.point[closest_neighbor]) + calculate_distance(p, self.point[second_closest_neighbor]) - calculate_distance(self.point[closest_neighbor], self.point[second_closest_neighbor])
    
    # insert the new point into the tour
    # self.point.insert(closest_neighbor + 1, p)
   # def iterate_nodes(self):
      #  node = self.head
       # while node:
        #    yield node
          #  node = node.next
          #  def insert_smallest(self, p):
      #  new_node = Node(p)
       # if not self.head:
         #   self.head = new_node
         #   self.tail = new_node
        #else:
       #     node = self.head
        #    min_increase = float('inf')
        #    min_node = node
         #   while node.next:
          #      increase = (
            #        node.point.distance)

            #from __future__ import annotations

'''
Tour class which is a collection of ordered points.
The functions allow you to insert points in a way that will 
keep the distance of the tour as small as possible.
Each Tour object should be able to print out the points in order, 
count its number of points, compute its total distance, 
and insert a new point using either of the two heuristics. 
The constructor creates an empty tour.
'''

#from point import Point

# Hint: You will want to use a classic LinkedList Node to implement the tour.
class Node:
    def __init__(self, point):
        # This node's point 
        self.point = point

        # The next node
        self.next = None 

class Tour:
    # Creates an empty tour
    # Initialize any instance variables you think are needed.
    def __init__(self):   
        self.head = None
        self.tail = None

    # Returns string representation of the Tour.
    # Should output a list of all points on the Tour.
    def __str__(self):
        point_list = [str(node.point) for node in self.iterate_nodes()]
        return "[" + ", ".join(point_list) + "]"

    # Return the number of points on tour
    # Hint: You should not have to iterate through the entire Tour to get the size.
    def size(self):
        count = 0
        node = self.head
        while node:
            count += 1
            node = node.next
        return count

    # Computes and returns the distance of the entire tour
    def distance(self):
        total_distance = 0
        node = self.head
        while node:
            total_distance += node.point.distance_to(node.next.point if node.next else self.head.point)
            node = node.next
        return total_distance

    # Helper function to insert a new point p into the Tour after a previous Node prev.
    # Example if the tour is a -> b -> c -> d
    # And you call _insert_at(p, c). Then the Tour should look like:
    # a -> b -> c -> p -> d
    # You can use this helper function in the insertNearest and insertSmallest
    # once you find the point after which you should insert p.
    def _insert_at(self, p, prev: Node):
        new_node = Node(p)
        new_node.next = prev.next
        prev.next = new_node

    # Insert a new Point p to the Tour using nearest neighbor heuristic
    # Insert a new Point p to the Tour using nearest neighbor heuristic
    def insert_nearest(self, p):
     new_node = Node(p)
     if not self.head:
        self.head = new_node
        self.tail = new_node
     else:
        node = self.head
        min_distance = node.point.distance_to(p)
        min_node = node
        while node:
            distance = node.point.distance_to(p)
            if distance < min_distance:
                min_distance = distance
                min_node = node
            node = node.next
        self._insert_at(p, min_node)

    # Insert a new Point p to the Tour using smallest increase heuristic
  # Insert a new Point p to the Tour using smallest increase heuristic
    # Insert a new Point p to the Tour using smallest increase heuristic
       # Insert a new Point p to the Tour using smallest increase heuristic
    def insert_smallest(self, p):
     new_node = Node(p)
     if not self.head:
        self.head = new_node
        self.tail = new_node
     else:
        node = self.head
        min_increase = float('inf')
        min_node = node
        while node:
            increase = (
                node.point.distance_to(p) +
                p.distance_to(node.next.point if node.next else self.head.point) -
                node.point.distance_to(node.next.point if node.next else self.head.point)
            )
            if increase < min_increase:
                min_increase = increase
                min_node = node
            node = node.next
        self._insert_at(p, min_node)
        
        # Update the tail reference after inserting the new node
        self.tail = new_node